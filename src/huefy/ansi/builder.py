"""
[ ansi/builder.py : AnsiEscapeCodeBuilder ] 

This module provides the AnsiEscapeCodeBuilder class, a utility for inspecting and documenting Python classes. 
It allows users to retrieve information about methods and attributes of a class, apply decorators dynamically,
and generate JSON representations of class metadata.

Methods:
    __init__                            : Initializes the builder with default values.
    set_bold                            : Enable or disable bold style.
    set_italic                          : Enable or disable italic style.
    set_underline                       : Enable or disable underline style.
    set_strikethrough                   : Enable or disable strikethrough style.
    set_overline                        : Enable or disable overline style.
    set_fg_color                        : Set the foreground color.
    set_bright_fg_color                 : Set the bright foreground color.
    set_bg_color                        : Set the background color.
    set_bright_bg_color                 : Set the bright background color.
    set_term_bg_color                   : Set the terminal background color.
    set_negative                        : Enable or disable negative color scheme.
    
    move_cursor_up                      : Move the cursor up by a specified number of lines.
    move_cursor_down                    : Move the cursor down by a specified number of lines.
    move_cursor_forward                 : Move the cursor forward by a specified number of columns.
    move_cursor_backward                : Move the cursor backward by a specified number of columns.
    
    clear_screen                        : Clear the entire screen.
    clear_line                          : Clear the current line.
    
    _parse_color                        : Parse the color specification.
    
    build                               : Build the ANSI escape code string.

    
Features:
    Text Styling        : Apply various styles to text output, including bold, italic, underline, strikethrough, and overline.
    Color Management    : Configure text and background colors with options for bright variants and terminal-specific backgrounds.
    Cursor Control      : Move the cursor up, down, forward, or backward by specified amounts to adjust text positioning dynamically.
    Screen Management   : Clear the entire screen or just the current line to manage terminal content.
    Color Parsing       : Includes functionality to interpret color specifications for accurate color management.
    ANSI Code Building  : Generate the complete ANSI escape code string to apply all configured styles and colors to terminal output.
    

Module     : ansi/builder
File       : builder.py
Version    : 1.0.0
Repository : https://www.github.com/devinci-it/ansi
Author     : Vince De Torres    | GH devinci-it


(c) devinci-it 2024
Autogenerated using docupy 1.0.0  | https://www.github.com/devinci-it/docupy | Install using pip: `pip install docupy`
"""

import colorsys
from huefy.utils import ColorConverter  # Ensure ColorConverter is imported

class AnsiEscapeCodeBuilder:
    """
    A class for constructing ANSI escape codes for terminal text styling.

    Attributes:
        _styles (list): List of text style codes.
        _fg_color (str): Foreground color code.
        _bg_color (str): Background color code.
        _term_bg_color (str): Background color for the entire terminal.
        _negative (bool): Whether to use a negative color scheme.
        _strikethrough (bool): Whether to apply strikethrough effect.
        _overline (bool): Whether to apply overline effect.
    """

    def __init__(self):
        """
        Initializes the builder with default values.
        """
        self._styles = []
        self._fg_color = None
        self._bg_color = None
        self._term_bg_color = None
        self._negative = False
        self._bright_fg_color = None
        self._bright_bg_color = None
        self._strikethrough = False
        self._overline = False

    def set_bold(self, enabled=True):
        """
        Enable or disable bold style.

        Args:
            enabled (bool): If True, enable bold style; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        if enabled:
            self._styles.append('1')
        else:
            self._styles.append('22')  # Reset bold
        return self

    def set_italic(self, enabled=True):
        """
        Enable or disable italic style.

        Args:
            enabled (bool): If True, enable italic style; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        if enabled:
            self._styles.append('3')
        else:
            self._styles.append('23')  # Reset italic
        return self

    def set_underline(self, enabled=True):
        """
        Enable or disable underline style.

        Args:
            enabled (bool): If True, enable underline style; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        if enabled:
            self._styles.append('4')
        else:
            self._styles.append('24')  # Reset underline
        return self

    def set_strikethrough(self, enabled=True):
        """
        Enable or disable strikethrough style.

        Args:
            enabled (bool): If True, enable strikethrough style; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        if enabled:
            self._styles.append('9')
        else:
            self._styles.append('29')  # Reset strikethrough
        return self

    def set_overline(self, enabled=True):
        """
        Enable or disable overline style.

        Args:
            enabled (bool): If True, enable overline style; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        if enabled:
            self._styles.append('53')
        else:
            self._styles.append('55')  # Reset overline
        return self

    def set_fg_color(self, **kwargs):
        """
        Set the foreground color.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        r, g, b = self._parse_color(**kwargs)
        self._fg_color = f'38;2;{r};{g};{b}'
        return self

    def set_bright_fg_color(self, **kwargs):
        """
        Set the bright foreground color.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        r, g, b = self._parse_color(**kwargs)
        self._bright_fg_color = f'38;2;{r};{g};{b};1'
        return self

    def set_bg_color(self, **kwargs):
        """
        Set the background color.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        r, g, b = self._parse_color(**kwargs)
        self._bg_color = f'48;2;{r};{g};{b}'
        return self

    def set_bright_bg_color(self, **kwargs):
        """
        Set the bright background color.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        r, g, b = self._parse_color(**kwargs)
        self._bright_bg_color = f'48;2;{r};{g};{b};1'
        return self

    def set_term_bg_color(self, **kwargs):
        """
        Set the terminal background color.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        r, g, b = self._parse_color(**kwargs)
        self._term_bg_color = f'\033]11;{r};{g};{b}\007'
        return self

    def set_negative(self, enabled=True):
        """
        Enable or disable negative color scheme.

        Args:
            enabled (bool): If True, enable negative color scheme; if False, disable it.

        Returns:
            AnsiEscapeCodeBuilder: The instance of the builder for method chaining.
        """
        self._negative = enabled
        return self

    def move_cursor_up(self, lines=1):
        """
        Move the cursor up by a specified number of lines.

        Args:
            lines (int): Number of lines to move the cursor up.

        Returns:
            str: ANSI escape code for moving the cursor up.
        """
        return f'\033[{lines}A'

    def move_cursor_down(self, lines=1):
        """
        Move the cursor down by a specified number of lines.

        Args:
            lines (int): Number of lines to move the cursor down.

        Returns:
            str: ANSI escape code for moving the cursor down.
        """
        return f'\033[{lines}B'

    def move_cursor_forward(self, columns=1):
        """
        Move the cursor forward by a specified number of columns.

        Args:
            columns (int): Number of columns to move the cursor forward.

        Returns:
            str: ANSI escape code for moving the cursor forward.
        """
        return f'\033[{columns}C'

    def move_cursor_backward(self, columns=1):
        """
        Move the cursor backward by a specified number of columns.

        Args:
            columns (int): Number of columns to move the cursor backward.

        Returns:
            str: ANSI escape code for moving the cursor backward.
        """
        return f'\033[{columns}D'

    def clear_screen(self):
        """
        Clear the entire screen.

        Returns:
            str: ANSI escape code for clearing the screen.
        """
        return '\033[2J'

    def clear_line(self):
        """
        Clear the current line.

        Returns:
            str: ANSI escape code for clearing the line.
        """
        return '\033[2K'

    def _parse_color(self, **kwargs):
        """
        Parse the color specification.

        Args:
            **kwargs: Color specification (either 'color', 'rgb', or 'hsl').

        Returns:
            tuple: RGB color tuple.

        Raises:
            ValueError: If the color specification is invalid.
        """
        if 'color' in kwargs:
            return ColorConverter.hex_to_rgb(kwargs['color'])
        elif 'rgb' in kwargs:
            return kwargs['rgb']
        elif 'hsl' in kwargs:
            return ColorConverter.hsl_to_rgb(kwargs['hsl'])
        else:
            raise ValueError("Invalid color specification. Provide either 'color', 'rgb', or 'hsl'.")

    def build(self):
        """
        Build the ANSI escape code string.

        Returns:
            str: The constructed ANSI escape code string.
        """
        codes = []
        if self._term_bg_color:
            return self._term_bg_color

        if self._negative:
            self._fg_color, self._bg_color = self._bg_color, self._fg_color

        if self._bright_fg_color:
            codes.append(self._bright_fg_color)
        elif self._fg_color:
            codes.append(self._fg_color)
        if self._bright_bg_color:
            codes.append(self._bright_bg_color)
        elif self._bg_color:
            codes.append(self._bg_color)
        codes.extend(self._styles)

        return f'\033[{";".join(codes)}m'